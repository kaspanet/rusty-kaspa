name: Build and upload assets
on:
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Build gnu-linux on ubuntu-18.04 and musl on ubuntu latest
        # os: [ ubuntu-18.04, ubuntu-latest, windows-latest, macos-latest ]
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    name: Building, ${{ matrix.os }}
    steps:
      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo Build Outputs
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Toolchain and OpenSSL
        uses: actions/cache@v4
        with:
          path: |
            ~/x-tools
            ~/openssl
          key: ${{ runner.os }}-musl-${{ hashFiles('**/musl-toolchain/.config') }}
          restore-keys: |
            ${{ runner.os }}-musl-

      - name: Build on Linux
        if: runner.os == 'Linux'
        # We're using musl to make the binaries statically linked and portable
        run: |
          if [ ! -d "$HOME/x-tools" ]; then
            # Install dependencies
            sudo apt-get update
            sudo apt-get install -y autoconf automake libtool libtool-bin unzip help2man python3.10-dev gperf bison flex texinfo gawk libncurses5-dev
            
            # Clone crosstool-ng
            git clone https://github.com/crosstool-ng/crosstool-ng
            
            # Configure and build crosstool-ng
            cd crosstool-ng
            
            # Use version 1.26
            git checkout crosstool-ng-1.26.0

            ./bootstrap
            ./configure --prefix=$HOME/ctng
            make
            make install

            # Add crosstool-ng to PATH
            export PATH=$HOME/ctng/bin:$PATH

            # Configure and build the musl toolchain
            cd $GITHUB_WORKSPACE/musl-toolchain
            ct-ng build > build.log 2>&1
            
            # Set status to the exit code of the build
            status=$?
            
            # We store the log in a file because it bloats the screen too much
            # on GitHub Actions. We print it only if the build fails.
            echo "Build result:"
            if [ $status -eq 0 ]; then
              echo "Build succeeded"
              ls -la $HOME/x-tools
            else
              echo "Build failed, here's the log:"
              cat build.log
            fi
          fi
          
          # Update toolchain variables: C compiler, C++ compiler, linker, and archiver
          export CC=$HOME/x-tools/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-gcc
          export CXX=$HOME/x-tools/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-g++
          export LD=$HOME/x-tools/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-ld
          export AR=$HOME/x-tools/x86_64-multilib-linux-musl/bin/x86_64-multilib-linux-musl-ar        
          
          # Check if "$HOME/openssl" directory exists from cache
          if [ ! -d "$HOME/openssl" ]; then
            wget https://www.openssl.org/source/openssl-1.1.1l.tar.gz
            tar xzf openssl-1.1.1l.tar.gz
            cd openssl-1.1.1l
            # Configure OpenSSL for static linking
            ./Configure no-shared --static linux-x86_64 -fPIC --prefix=$HOME/openssl
            make depend
            make
            make install
            # Check if OpenSSL was installed successfully
            ls -la $HOME/openssl
          fi

          # Go back to the workspace  
          cd $GITHUB_WORKSPACE

          # Set environment variables for static linking
          export OPENSSL_DIR=$HOME/openssl
          export OPENSSL_STATIC=true
          export RUSTFLAGS="-C link-arg=-static -C link-arg=-L$OPENSSL_DIR/lib"

          # We specify the compiler that will invoke linker
          export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=$CC

          # Add target
          rustup target add x86_64-unknown-linux-musl

          # Install missing dependencies
          cargo fetch --target x86_64-unknown-linux-musl

          # Patch missing include in librocksdb-sys-0.16.0+8.10.0. Credit: @supertypo
          FILE_PATH=$(find $HOME/.cargo/registry/src/ -path "*/librocksdb-sys-0.16.0+8.10.0/*/offpeak_time_info.h")
          if [ -n "$FILE_PATH" ]; then
            sed -i '1i #include <cstdint>' "$FILE_PATH"
          else
            echo "No such file for sed modification."
          fi
          
          find $HOME/.cargo/registry/src/ -type f -path "*/libmimalloc-sys-*/c_src/mimalloc/CMakeLists.txt" | while read FILE_PATH; do
              echo "Modifying $FILE_PATH"
              sed -i '/set_property(TARGET mimalloc-static PROPERTY POSITION_INDEPENDENT_CODE ON)/d' "$FILE_PATH"
          done

          find $HOME/.cargo/registry/src/ -type f -path "*/libmimalloc-sys-*/c_src/mimalloc/src/alloc-override.c" | while read FILE_PATH; do
              echo "Modifying $FILE_PATH. Disabling branch and GLIBC check."
              sed -i 's/#elif (defined(__GNUC__) || defined(__clang__))/#elif 0/' "$FILE_PATH"
              sed -i 's/#elif defined(__GLIBC__) && defined(__linux__)/#elif defined(__linux__)/' "$FILE_PATH"
          done

          # Build for musl
          cargo --verbose build --bin kaspad --bin rothschild --bin kaspa-wallet --release --target x86_64-unknown-linux-musl
          mkdir bin || true
          cp target/x86_64-unknown-linux-musl/release/kaspad bin/
          cp target/x86_64-unknown-linux-musl/release/rothschild bin/
          cp target/x86_64-unknown-linux-musl/release/kaspa-wallet bin/
          archive="bin/rusty-kaspa-${{ github.event.release.tag_name }}-linux-musl-amd64.zip"
          asset_name="rusty-kaspa-${{ github.event.release.tag_name }}-linux-musl-amd64.zip"
          zip -r "${archive}" ./bin/*
          echo "archive=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Build on Windows
        if: runner.os == 'Windows'
        shell: bash
        run: |
          cargo build --bin kaspad --release
          cargo build --bin simpa --release
          cargo build --bin rothschild --release
          cargo build --bin kaspa-wallet --release
          mkdir bin || true
          cp target/release/kaspad.exe bin/
          cp target/release/simpa.exe bin/
          cp target/release/rothschild.exe bin/
          cp target/release/kaspa-wallet.exe bin/
          archive="bin/rusty-kaspa-${{ github.event.release.tag_name }}-win64.zip"
          asset_name="rusty-kaspa-${{ github.event.release.tag_name }}-win64.zip"
          powershell "Compress-Archive bin/* \"${archive}\""
          echo "archive=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Build on MacOS
        if: runner.os == 'macOS'
        run: |
          cargo build --bin kaspad --release
          cargo build --bin simpa --release
          cargo build --bin rothschild --release
          cargo build --bin kaspa-wallet --release
          mkdir bin || true
          cp target/release/kaspad bin/
          cp target/release/simpa bin/
          cp target/release/rothschild bin/
          cp target/release/kaspa-wallet bin/
          archive="bin/rusty-kaspa-${{ github.event.release.tag_name }}-osx.zip"
          asset_name="rusty-kaspa-${{ github.event.release.tag_name }}-osx.zip"
          zip -r "${archive}" ./bin/*
          echo "archive=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "./${{ env.archive }}"
          asset_name: "${{ env.asset_name }}"
          asset_content_type: application/zip

  build-wasm:
    runs-on: ubuntu-latest
    name: Building WASM32 SDK
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install llvm
        id: install_llvm
        continue-on-error: true
        run: |
          wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
          sudo apt-get install -y clang-15 lldb-15 lld-15 clangd-15 clang-tidy-15 clang-format-15 clang-tools-15 llvm-15-dev lld-15 lldb-15 llvm-15-tools libomp-15-dev libc++-15-dev libc++abi-15-dev libclang-common-15-dev libclang-15-dev libclang-cpp15-dev libunwind-15-dev
          # Make Clang 15 default
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-15/bin/clang++ 100
          sudo update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-15/bin/clang 100
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/lib/llvm-15/bin/clang-format 100
          sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/lib/llvm-15/bin/clang-tidy 100
          sudo update-alternatives --install /usr/bin/run-clang-tidy run-clang-tidy /usr/lib/llvm-15/bin/run-clang-tidy 100
          # Alias cc to clang
          sudo update-alternatives --install /usr/bin/cc cc /usr/lib/llvm-15/bin/clang 0
          sudo update-alternatives --install /usr/bin/c++ c++ /usr/lib/llvm-15/bin/clang++ 0

      - name: Install gcc-multilib
        # gcc-multilib allows clang to find gnu libraries properly
        run: sudo apt install -y gcc-multilib

      - name: Install stable toolchain
        if: steps.install_llvm.outcome == 'success' && steps.install_llvm.conclusion == 'success'
        uses: dtolnay/rust-toolchain@stable

      - name: Install wasm-pack
        run: cargo install wasm-pack

      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Install NodeJS
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install NodeJS dependencies
        run: npm install --global typedoc typescript

      - name: Cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build WASM32 SDK
        run: |
          cd wasm
          bash build-release
          mv release/kaspa-wasm32-sdk.zip ../kaspa-wasm32-sdk-${{ github.event.release.tag_name }}.zip

          archive="kaspa-wasm32-sdk-${{ github.event.release.tag_name }}.zip"
          asset_name="kaspa-wasm32-sdk-${{ github.event.release.tag_name }}.zip"
          echo "archive=${archive}" >> $GITHUB_ENV
          echo "asset_name=${asset_name}" >> $GITHUB_ENV

      - name: Upload WASM32 SDK
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: "./${{ env.archive }}"
          asset_name: "${{ env.asset_name }}"
          asset_content_type: application/zip
